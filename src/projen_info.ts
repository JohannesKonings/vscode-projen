import * as fs from "fs";
import { posix } from "path";
import * as vscode from "vscode";
import { GeneratedFileDecorationProvider } from "./generated_file_decorator";

export class ProjenInfo {
  public managedFiles: string[] = [];
  public tasks: ProjenTask[] = [];
  public dependencies: ProjenDependency[] = [];
  decorator: GeneratedFileDecorationProvider;

  constructor(public workspaceRoot: string) {
    this.decorator = new GeneratedFileDecorationProvider();
    vscode.window.registerFileDecorationProvider(this.decorator);
  }

  async update() {
    const projenFolderFiles = await vscode.workspace.findFiles(
      new vscode.RelativePattern(this.workspaceRoot, ".projen/*")
    );
    const rootFiles = await vscode.workspace.findFiles(
      new vscode.RelativePattern(this.workspaceRoot, "*")
    );

    if (projenFolderFiles.length == 0) {
      void vscode.commands.executeCommand(
        "setContext",
        "projen.inProject",
        false
      );

      this.managedFiles = [];
      this.dependencies = [];
      this.decorator.files = [];

      return;
    }

    let files: vscode.Uri[] = [];
    let verifiedFiles = false;

    const fileManifestUri = projenFolderFiles.find((f) =>
      f.fsPath.endsWith("files.json")
    );
    if (fileManifestUri) {
      try {
        const fileManifest = fs.readFileSync(fileManifestUri.fsPath, "utf-8");
        const fileData: string[] = JSON.parse(fileManifest).files;
        files = fileData.map((f) =>
          vscode.Uri.file(posix.join(this.workspaceRoot, f))
        );

        // handles special cases
        const specialFiles = rootFiles.filter(
          (f) =>
            f.fsPath.endsWith("package-lock.json") ||
            f.fsPath.endsWith(".lock") ||
            f.fsPath.endsWith("package.json")
        );
        if (specialFiles.length > 0) {
          files.push(...specialFiles);
        }

        verifiedFiles = true;
      } catch (error) {
        console.error(error);
      }
    }

    if (files.length === 0) {
      files.push(...rootFiles, ...projenFolderFiles);
    }

    void vscode.commands.executeCommand("setContext", "projen.inProject", true);

    const projenManaged: vscode.Uri[] = [];
    files.forEach((f) => {
      if (
        verifiedFiles ||
        f.fsPath.endsWith("package-lock.json") ||
        f.fsPath.endsWith(".lock")
      ) {
        // TODO handle lockfiles in a smarter way
        // Since dependencies are managed by projen, a lockfile is as well (kinda)
        // lock files are typically huge, would much rather not try to search them
        projenManaged.push(f);
      } else {
        const fileContent = fs.readFileSync(f.fsPath, "utf-8");
        if (
          fileContent.includes(
            `~~` + ` Generated by projen. To modify, edit .projenrc`
          )
        ) {
          projenManaged.push(f);
        }
      }
    });

    projenManaged.forEach((f) => {
      if (f.fsPath.endsWith("tasks.json")) {
        const fileContent = fs.readFileSync(f.fsPath, "utf-8");
        const taskData = JSON.parse(fileContent).tasks;

        this.tasks = Object.values(taskData).map((t: any) => new ProjenTask(t));
        this.tasks.sort((a, b) => a.name.localeCompare(b.name));
      } else if (f.fsPath.endsWith("deps.json")) {
        const fileContent = fs.readFileSync(f.fsPath, "utf-8");
        const depData = JSON.parse(fileContent).dependencies;
        depData.sort((a: any, b: any) => a.name.localeCompare(b.name));

        this.dependencies = depData.map(
          (d: any) => new ProjenDependency(d.name, d.type, d.version)
        );
      }
    });

    const directoryMap: any = {};
    projenManaged.forEach((f) => {
      const directory = f.fsPath
        .replace(/\\/g, "/")
        .split("/")
        .slice(0, -1)
        .join("/");
      if (directoryMap[directory] !== undefined) {
        directoryMap[directory]++;
      } else {
        directoryMap[directory] = 1;
      }
    });
    const managedDirectories = Object.keys(directoryMap).filter((d) => {
      const filesFromDir = fs.readdirSync(d);
      return directoryMap[d] === filesFromDir.length;
    });
    if (managedDirectories.length > 0) {
      projenManaged.push(...managedDirectories.map((d) => vscode.Uri.file(d)));
    }

    this.decorator.files = projenManaged.map((f) => f.fsPath);

    this.managedFiles = projenManaged.map((file: vscode.Uri) => {
      const removedRoot = file.fsPath.replace(this.workspaceRoot, "");
      const betterFile = removedRoot.replace(/\\/g, "/");

      if (betterFile.startsWith("/")) {
        return betterFile.slice(1);
      } else {
        return betterFile;
      }
    });

    this.managedFiles.sort();

    this.decorator._onDidChangeFileDecorations.fire(projenManaged);
  }
}
export class ProjenStep {
  constructor(public type: string, public value: string) {}
}

export class ProjenTask {
  public name: string;
  public description?: string;
  public steps: ProjenStep[];

  constructor(taskData: any) {
    this.name = taskData.name;
    this.description = taskData.description;
    this.steps = (taskData.steps ?? []).map((s: any) => {
      const entries = Object.entries(s)[0];
      return new ProjenStep(entries[0], entries[1] as any);
    });
  }
}

export class ProjenDependency {
  constructor(
    public name: string,
    public type: string,
    public version?: string
  ) {}
}
